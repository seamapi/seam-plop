

import nodePgMigrate from "node-pg-migrate"
import * as zg from "zapatos/generate"
import { Client } from "pg"
import Debug from "debug"
import {
  getDbConnectionFromEnv,
  getDbConnectionStringFromEnv,
} from "./get-connection"

const debug = Debug("seam_pm")

export const migrate = async ({
  update_typings = false,
  silent = false,
}: {
  update_typings?: boolean
  silent?: boolean
} = {}) => {
  const conn = getDbConnectionFromEnv()
  const client = new Client(conn as any)
  await client.connect()

  let logger

  if (silent) {
    logger = {
      ...console,
      info: () => null,
      log: () => null,
    }
  } else {
    logger =
      debug.enabled || process.env.NODE_ENV !== "test"
        ? console
        : {
            ...console,
            info: () => null,
            log: () => null,
          }
  }

  await Promise.all([
    nodePgMigrate({
      dbClient: client,
      direction: "up",
      schema: "migrations",
      createSchema: true,
      migrationsTable: "pgmigrations",
      verbose: false,
      dir: "./src/lib/db/migrations",
      logger,
    } as any),
    // TODO put graphile worker migration here
  ])

  if (update_typings) {
    const schemas = ["pm"]
    await zg.generate({
      db: {
        connectionString: getDbConnectionStringFromEnv(),
      },
      schemas: Object.fromEntries(
        schemas.map((s) => [
          s,
          {
            include: "*",
            exclude: [],
          },
        ])
      ),
      outDir: "./src/db",
    })
  }

  await client.end()
}

export default migrate