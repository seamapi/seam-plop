import nodePgMigrate from "node-pg-migrate"
import getDB from "db/get-db"
import * as zg from "zapatos/generate"
import { Client } from "pg"
import Debug from "debug"

const debug = Debug("MY_PROJECT_NAME")

export const migrate = async ({
  database_url,
  db,
  update_typings = false,
  silent = false,
}: {
  database_url?: string
  db?: any
  update_typings?: boolean
  silent?: boolean
} = {}) => {
  let client

  if (!database_url) {
    const conn = db?.connection || getDB.getConnectionInfo()
    client = new Client(conn)
    const { host, password, port, database, user, ssl } = conn
    database_url = `postgresql://${user}:${password}@${host}:${port}/${database}${
      ssl ? "?sslmode=no-verify" : ""
    }`
  }

  client = new Client({
    connectionString: database_url,
  })

  await client.connect()

  let logger

  if (silent) {
    logger = {
      ...console,
      info: () => null,
      log: () => null,
    }
  } else {
    logger =
      debug.enabled || process.env.NODE_ENV !== "test"
        ? console
        : {
            ...console,
            info: () => null,
            log: () => null,
          }
  }

  await Promise.all([
    nodePgMigrate({
      dbClient: client,
      direction: "up",
      schema: "migrations",
      createSchema: true,
      migrationsTable: "pgmigrations",
      verbose: false,
      dir: "./db/migrations",
      logger,
    } as any),
    // TODO put graphile worker migration here
  ])

  if (update_typings) {
    const schemas = [
      // TODO insert schemas to type
    ]
    await zg.generate({
      db: {
        connectionString: database_url,
      },
      schemas: Object.fromEntries(
        schemas.map((s) => [
          s,
          {
            include: "*",
            exclude: [],
          },
        ])
      ),
      outDir: "./src/db",
    })
  }

  await client.end()
}

export default migrate